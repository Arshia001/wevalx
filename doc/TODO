- (x) weval: support removal of enqueued specialization request; and make request
  an inlined-intrusive object (in ImmutableScriptData?
  SharedImmutableScriptData?).

- (x) interpreter: clean up unused label situation and other warnings.

- (x) interpreter: upstream the "wizer support in JS shell" patch

- (x) interpreter: split out the "put everything in a context" patch.
- (x) interpreter: make the explicit-call ifdef'd (and split out the patch).
- (x) interpreter: "make PC a local variable" patch
- (x) interpreter: turn-off-interrupts-in-WASI-mode patch (and coverage, and ...)

- (x) interpreter: weval annotations patch; make sure its changes are fairly local
  if we have to carry it in our own tree; put it under a config option too.
  - include "slowpath to interpreter" fallback here
  - include ImmutableScriptData "specialized function pointer" field,
    registration / de-registration, etc
  - include third_party weval header
  - include "constant memory" intrinsics
  - include push/pop/update-context intrinsics

  - make one mozconfig option imply the rest

- weval: use imports for intrinsics, rather than dummy functions. Write
  implementations that wizer can provide.
  - how do we remove these in processed module? rewrite generic InterpretInner
    to elide; remove imports too; may force renumbering of all other functions?
    - do a separate post-pass, written in a custom way with wasmparser +
      wasm-encoder, that renumbers function index references and deletes
      specified imports

- spidermonkey-wasi-embedding: turn it into a submodule, and have a local (not
  Dockerized) build mode. Use this to develop.
  - carry two copies of spidermonkey.wasm: with and without annotations
  - embed weval as a library, just like wizer
